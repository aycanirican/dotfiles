;; -*-lisp-*-
(in-package :stumpwm)
(require 'swank)
(swank:create-server)

(set-contrib-dir "/home/gridaphobe/Source/stumpwm/contrib")

(mapcar #'load-module '("battery-portable"
                        "cpu"
                        "notifications"
                        "wifi"
                        ))

;; change the prefix key to something else
(set-prefix-key (kbd "C-z"))

(defvar *my-font*
  "-*-terminus-medium-*-*-*-14-*-*-*-*-*-iso10646-1")

;; focus follows mouse
(setf *mouse-focus-policy* :sloppy)

(setf *input-completion-type* :fuzzy)
(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)
(set-transient-gravity :top)
(set-focus-color "Red")

;; Show time, cpu usage and network traffic in the modeline
(setf *iwconfig-path* "/usr/sbin/iwconfig")

(setf *time-modeline-string* "%a %m/%e/%Y ^4*^b%H:%M^b^n") ; zero-pad day
(setf *screen-mode-line-format*
      (list "^B%g^b | %W ^> "
            "Notifications: " '(:eval (princ-to-string (length notifications)))
            " | %B | %c | %d"
            ))

;; Turn on the modeline
(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))


(defcommand dmenu () ()
  (run-shell-command (format nil "dmenu_run -fn '~a'" *my-font*)))

(defcommand reinit () ()
  (reload)
  (loadrc))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

;; Browse somewhere
(define-key *root-map* (kbd "b") "colon1 exec chromium http://www.")
;; Ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec urxvtc -e ssh ")

;; ;; Web jump (works for Google and Imdb)
;; (defmacro make-web-jump (name prefix)
;;   `(defcommand ,name (search) ((:rest ,(concatenate 'string name " search: ")))
;;     (substitute #\+ #\Space search)
;;     (run-shell-command (concatenate 'string ,prefix search))))

;; (make-web-jump google "chromium http://www.google.com/search?q=")

;; ;; C-t M-s is a terrble binding, but you get the idea.
;; (define-key *root-map* (kbd "M-s") "google")

;; Message window font
(set-font *my-font*)

;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

;; Use lower-case names!
(grename "dev")
(gnewbg "web")
(gnewbg "net")
(gnewbg "irc")

;; Last rule to match takes precedence!
;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; match is performed.
;; TIP: if the :create flag is set then a missing group will be created and
;; restored from *data-dir*/create file.
;; TIP: if the :restore flag is set then group dump is restored even for an
;; existing group using *data-dir*/restore file.
(define-frame-preference "web"
    ;; frame raise lock (lock AND raise == jumpto)
    (0       t     t    :class "Chromium"))
(define-frame-preference "irc"
  (0 T T :CLASS "Emacs" :INSTANCE "emacs" :TITLE "emacs#fluidinfo")
  (1 T T :CLASS "Emacs" :INSTANCE "emacs" :TITLE "emacs#haskell")
  (2 T T :CLASS "Emacs" :INSTANCE "emacs" :TITLE "emacs#ucsdpl")
  (3 T T :CLASS "Emacs" :INSTANCE "emacs" :TITLE "emacs#emacs")
  (4 T T :CLASS "Emacs" :INSTANCE "emacs" :TITLE "emacs#racket")
)

(setf *window-type-override-list*
      '((:dialog :class "Kmix")
        (:dialog :class "Kdmd4")))

(defmacro define-keys-for (m &rest keys)
  (let ((ks (mapcar #'(lambda (k)
                        (cons 'define-key
                              (cons m k)))
                    keys)))
    `(progn ,@ks)))

(define-keys-for *top-map*
  ((kbd "s-l") "move-focus right")
  ((kbd "s-j") "move-focus left")
  ((kbd "s-i") "move-focus up")
  ((kbd "s-k") "move-focus down")
  ((kbd "s-L") "move-window right")
  ((kbd "s-J") "move-window left")
  ((kbd "s-I") "move-window up")
  ((kbd "s-K") "move-window down")
  ((kbd "s-n") "next-in-frame")
  ((kbd "s-p") "prev-in-frame")
  ((kbd "s-v") "vsplit")
  ((kbd "s-h") "hsplit")
  ((kbd "s-c") "delete-window")
  ((kbd "s-C") "kill-window")
  ((kbd "s-r") "iresize")
  ((kbd "s-R") "remove")
  ((kbd "s-+") "balance-frames")
  ((kbd "s-d") "dmenu")
  ((kbd "s-1") "gselect 1")
  ((kbd "s-2") "gselect 2")
  ((kbd "s-3") "gselect 3")
  ((kbd "s-4") "gselect 4")
  ((kbd "s-!") "gmove 1")
  ((kbd "s-@") "gmove 2")
  ((kbd "s-#") "gmove 3")
  ((kbd "s-$") "gmove 4")
  ((kbd "s-b") "banish"))
